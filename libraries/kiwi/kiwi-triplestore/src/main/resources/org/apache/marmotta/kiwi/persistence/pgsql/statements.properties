#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements. See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership. The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# get metainformation
meta.tables            = select tablename from pg_tables where schemaname='public';
meta.insert            = INSERT INTO metadata(mkey,mvalue) VALUES(?,?);
meta.update            = UPDATE metadata SET mvalue = ? WHERE mkey = ?;
meta.get               = SELECT mvalue FROM metadata WHERE mkey = ?;
meta.version           = SELECT mvalue FROM metadata WHERE mkey = 'version';

# load entities
load.node_by_id        = SELECT id,ntype,svalue,ivalue,dvalue,tvalue,tzoffset,bvalue,lang,ltype,createdAt,ST_AsText(gvalue) FROM nodes WHERE id = ?
load.nodes_by_ids        = SELECT id,ntype,svalue,ivalue,dvalue,tvalue,tzoffset,bvalue,lang,ltype,createdAt,ST_AsText(gvalue) FROM nodes WHERE id IN(%s) LIMIT %d

load.uri_by_uri        = SELECT id,ntype,svalue,ivalue,dvalue,tvalue,tzoffset,bvalue,lang,ltype,createdAt,ST_AsText(gvalue) FROM nodes WHERE ntype = 'uri' AND svalue = ?

load.bnode_by_anonid   = SELECT id,ntype,svalue,ivalue,dvalue,tvalue,tzoffset,bvalue,lang,ltype,createdAt,ST_AsText(gvalue) FROM nodes WHERE ntype = 'bnode' AND svalue = ?

load.literal_by_v     = SELECT id,ntype,svalue,ivalue,dvalue,tvalue,tzoffset,bvalue,lang,ltype,createdAt,ST_AsText(gvalue) FROM nodes WHERE ntype = 'string' AND svalue = ? AND (lang IS NULL OR lang = '') AND ltype IS NULL
load.literal_by_vl    = SELECT id,ntype,svalue,ivalue,dvalue,tvalue,tzoffset,bvalue,lang,ltype,createdAt,ST_AsText(gvalue) FROM nodes WHERE svalue = ? AND lang = ?
load.literal_by_vt    = SELECT id,ntype,svalue,ivalue,dvalue,tvalue,tzoffset,bvalue,lang,ltype,createdAt,ST_AsText(gvalue) FROM nodes WHERE svalue = ? AND ltype = ?

load.literal_by_iv     = SELECT id,ntype,svalue,ivalue,dvalue,tvalue,tzoffset,bvalue,lang,ltype,createdAt,ST_AsText(gvalue) FROM nodes WHERE ivalue = ? AND (lang IS NULL OR lang = '') AND ltype = ?
load.literal_by_dv     = SELECT id,ntype,svalue,ivalue,dvalue,tvalue,tzoffset,bvalue,lang,ltype,createdAt,ST_AsText(gvalue) FROM nodes WHERE dvalue = ? AND (lang IS NULL OR lang = '') AND ltype = ?
load.literal_by_tv     = SELECT id,ntype,svalue,ivalue,dvalue,tvalue,tzoffset,bvalue,lang,ltype,createdAt,ST_AsText(gvalue) FROM nodes WHERE tvalue = ? AND tzoffset = ? AND (lang IS NULL OR lang = '') AND ltype = ?
load.literal_by_bv     = SELECT id,ntype,svalue,ivalue,dvalue,tvalue,tzoffset,bvalue,lang,ltype,createdAt,ST_AsText(gvalue) FROM nodes WHERE bvalue = ? AND (lang IS NULL OR lang = '') AND ltype = ?

load.literal_by_gv    = SELECT id,ntype,svalue,ivalue,dvalue,tvalue,tzoffset,bvalue,lang,ltype,createdAt,ST_AsText(gvalue) FROM nodes WHERE gvalue = ? AND ltype = ?

load.namespace_prefix  = SELECT id,prefix,uri,createdAt FROM namespaces WHERE prefix = ?;
load.namespace_uri     = SELECT id,prefix,uri,createdAt FROM namespaces WHERE uri = ?;

load.triple_by_id      = SELECT id,subject,predicate,object,context,deleted,inferred,creator,createdAt,deletedAt FROM triples WHERE id = ?

# store entities
store.uri              = INSERT INTO nodes (id,ntype,svalue,createdAt) VALUES (?,'uri',?,?)
store.bnode            = INSERT INTO nodes (id,ntype,svalue,createdAt) VALUES (?,'bnode',?,?)
store.sliteral       = INSERT INTO nodes (id,ntype,svalue,dvalue,ivalue,lang,ltype,createdAt) VALUES (?,'string',?,?,?,?,?,?)

store.iliteral       = INSERT INTO nodes (id,ntype,svalue,dvalue,ivalue,ltype,createdAt) VALUES (?,'int',?,?,?,?,?)
store.dliteral       = INSERT INTO nodes (id,ntype,svalue,dvalue,ltype,createdAt) VALUES (?,'double',?,?,?,?)
store.bliteral       = INSERT INTO nodes (id,ntype,svalue,bvalue,ltype,createdAt) VALUES (?,'boolean',?,?,?,?)
store.tliteral       = INSERT INTO nodes (id,ntype,svalue,tvalue,tzoffset,ltype,createdAt) VALUES (?,'date',?,?,?,?,?)

store.gliteral       = INSERT INTO nodes (id,ntype,svalue,dvalue,ivalue,lang,ltype,createdAt,gvalue) VALUES (?,'geom',?,?,?,?,?,?,ST_GeomFromText(?,?))

store.namespace      = INSERT INTO namespaces (id,prefix,uri,createdAt) VALUES (?,?,?,?)

store.triple         = INSERT INTO triples (id,subject,predicate,object,context,inferred,createdAt) VALUES (?,?,?,?,?,?,?)
load.triple          = SELECT id FROM triples WHERE subject = ? AND predicate = ? AND object = ? AND context = ? AND deleted = false

query.size           = SELECT count(*) FROM triples WHERE deleted = false
query.size_ctx       = SELECT count(*) FROM triples WHERE context = ? AND deleted = false
query.contexts       = SELECT DISTINCT context FROM triples WHERE deleted = false
query.namespaces     = SELECT id,prefix,uri,createdAt FROM namespaces
query.resources      = SELECT id,ntype,svalue,createdAt FROM nodes WHERE ntype = 'uri' OR ntype = 'bnode'
query.resources_prefix = SELECT id,ntype,svalue,createdAt FROM nodes WHERE ntype = 'uri' AND svalue LIKE ?

# delete entities
delete.triple        = UPDATE triples SET deleted = true, deletedAt = now() WHERE id = ?
undelete.triple      = UPDATE triples SET deleted = false, deletedAt = NULL WHERE id = ?
delete.namespace     = DELETE FROM namespaces WHERE id = ?

delete.context       = UPDATE triples SET deleted = true, deletedAt = now() WHERE context = ?
delete.repository    = UPDATE triples SET deleted = true, deletedAt = now()

gc.check_consistency = SELECT svalue, ntype, count(id), max(id) FROM nodes group by svalue, ntype having count(id) > 1
gc.list_node_ids     = SELECT id FROM nodes WHERE svalue = ? AND ntype = CAST(? AS nodetype) AND id != ?

# temporary triple registry
registry.lookup      = SELECT tripleId FROM registry WHERE tripleKey = ? LIMIT 1
registry.register    = INSERT INTO registry (tripleKey, tripleId, txId) VALUES (?,?,?)
registry.release     = DELETE FROM registry WHERE txId = ?
registry.delete      = DELETE FROM registry WHERE tripleKey = ?
