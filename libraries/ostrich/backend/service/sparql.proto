/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

package marmotta.sparql.proto;

option java_package = "org.apache.marmotta.ostrich.client.proto";

import "model.proto";
import "google/protobuf/wrappers.proto";

// SPARQL request consisting of a single query string.
message SparqlRequest {
    string query = 1;
    marmotta.rdf.proto.URI base_uri = 2;
}

// SPARQL response row, containing a set of bindings.
message SparqlResponse {
    message Binding {
        string variable = 1;
        marmotta.rdf.proto.Value value = 2;
    }

    repeated Binding binding = 1;
}

// Interface describing services that allow to evaluate sparql queries.
service SparqlService {
    // Execute a SPARQL 1.1 tuple query and stream back the results.
    rpc TupleQuery(SparqlRequest) returns (stream SparqlResponse);

    // Execute a SPARQL 1.1 graph query and stream back the triples.
    rpc GraphQuery(SparqlRequest) returns (stream marmotta.rdf.proto.Statement);

    // Execute a SPARQL 1.1 ask query and return true or false.
    rpc AskQuery(SparqlRequest) returns (google.protobuf.BoolValue);
}